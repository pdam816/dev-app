[{"C:\\Users\\Puthikratanak Dam\\cs1300\\dev-app\\src\\index.js":"1","C:\\Users\\Puthikratanak Dam\\cs1300\\dev-app\\src\\App.js":"2","C:\\Users\\Puthikratanak Dam\\cs1300\\dev-app\\src\\reportWebVitals.js":"3","C:\\Users\\Puthikratanak Dam\\cs1300\\dev-app\\src\\ScrollView.jsx":"4","C:\\Users\\Puthikratanak Dam\\cs1300\\dev-app\\src\\FilteredList.jsx":"5","C:\\Users\\Puthikratanak Dam\\cs1300\\dev-app\\src\\BuildingsList.jsx":"6","C:\\Users\\Puthikratanak Dam\\cs1300\\dev-app\\src\\Cart.jsx":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":398,"mtime":1606967048360,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":10048,"mtime":1607052476133,"results":"12","hashOfConfig":"9"},{"size":6664,"mtime":1607096743226,"results":"13","hashOfConfig":"9"},{"size":2182,"mtime":1607050795791,"results":"14","hashOfConfig":"9"},{"size":2222,"mtime":1607049674390,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1t35f1e",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"C:\\Users\\Puthikratanak Dam\\cs1300\\dev-app\\src\\index.js",[],["33","34"],"C:\\Users\\Puthikratanak Dam\\cs1300\\dev-app\\src\\App.js",[],"C:\\Users\\Puthikratanak Dam\\cs1300\\dev-app\\src\\reportWebVitals.js",[],"C:\\Users\\Puthikratanak Dam\\cs1300\\dev-app\\src\\ScrollView.jsx",[],"C:\\Users\\Puthikratanak Dam\\cs1300\\dev-app\\src\\FilteredList.jsx",[],"C:\\Users\\Puthikratanak Dam\\cs1300\\dev-app\\src\\BuildingsList.jsx",["35"],"import React, { Component } from \"react\";\r\nimport {\r\n\tList,\r\n\tListItemText,\r\n\tListItem,\r\n\tListItemIcon,\r\n\tCard,\r\n\tCardContent,\r\n\tCardActions,\r\n\tButton\r\n} from \"@material-ui/core\";\r\n\r\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\r\nimport SettingsOverscanIcon from '@material-ui/icons/SettingsOverscan';\r\n\r\n/**\r\n * Component which renders the catalog of sortable and filterable list of buildings.\r\n */\r\nclass BuildingsList extends Component {\r\n\t/**\r\n\t * Renders an item (a building)\r\n\t * @param {} item - a building to be rendered.\r\n\t */\r\n\tcreateItem = item => {\r\n\t\t// stylings for the item\r\n\t\tconst listItemStyle = {\r\n\t\t\twidth: '33%',\r\n\t\t\theight: '100%'\r\n\t\t}\r\n\r\n\t\tconst imageStyle = {\r\n\t\t\twidth: '100%',\r\n\t\t\theight: '100%'\r\n\t\t}\r\n\r\n\t\tconst cardId = \"card\" + item.key\r\n\r\n\t\treturn (\r\n\t\t\t<ListItem style={listItemStyle}>\r\n\t\t\t\t<Card id={cardId}>\r\n\t\t\t\t\t<ListItemText>{item.name}</ListItemText>\r\n\t\t\t\t\t<img id=\"image\"\r\n\t\t\t\t\t\tsrc={item.image}\r\n\t\t\t\t\t\tclassName=\"Img\"\r\n\t\t\t\t\t\tstyle={imageStyle}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<ListItemIcon>\r\n\t\t\t\t\t\t\t\t<LocationCityIcon />\r\n\t\t\t\t\t\t\t\t<ListItemText>{item.type}</ListItemText>\r\n\t\t\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<ListItemIcon>\r\n\t\t\t\t\t\t\t\t<SettingsOverscanIcon />\r\n\t\t\t\t\t\t\t\t<ListItemText>{item.size}</ListItemText>\r\n\t\t\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<ListItemText>$ {item.price} million</ListItemText>\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t\t<CardActions>\r\n\t\t\t\t\t\t<Button color=\"primary\" variant=\"contained\" onClick={this.props.addItem}> Add to Cart</Button>\r\n\t\t\t\t\t</CardActions>\r\n\t\t\t\t</Card>\r\n\t\t\t</ListItem >\r\n\t\t)\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the item elements in a list.\r\n\t */\r\n\trender() {\r\n\t\t// styling for the list\r\n\t\tconst flexContainer = {\r\n\t\t\tdisplay: 'flex',\r\n\t\t\tflexDirection: 'row',\r\n\t\t\tflexWrap: 'wrap'\r\n\t\t};\r\n\t\tconst buildings = this.props.buildings;\r\n\t\t// maps createItem function for every building\r\n\t\tconst listNames = buildings.map(this.createItem);\r\n\r\n\t\tif (buildings.length === 0)\r\n\t\t\treturn <h3>Sorry, there are no results matching your filters. Try a different combination!</h3>\r\n\t\telse return <List style={flexContainer}>{listNames}</List>\r\n\r\n\t}\r\n}\r\n\r\nexport default BuildingsList;","C:\\Users\\Puthikratanak Dam\\cs1300\\dev-app\\src\\Cart.jsx",["36"],"import React, { Component } from 'react'\r\nimport {\r\n\tList,\r\n\tListItemText,\r\n\tListItem,\r\n\tListItemIcon,\r\n\tCard,\r\n\tCardContent,\r\n\tCardActions,\r\n\tButton\r\n} from \"@material-ui/core\";\r\n\r\nimport LocationCityIcon from '@material-ui/icons/LocationCity';\r\nimport SettingsOverscanIcon from '@material-ui/icons/SettingsOverscan';\r\n\r\n/**\r\n * Component which handles and renders the Cart element, which displays elements\r\n * added to 'cart'\r\n */\r\nclass Cart extends Component {\r\n\t/**\r\n\t * Renders a cart element.\r\n\t * @param {*} item - a building element\r\n\t */\r\n\tcreateItem = item => {\r\n\t\t// styling for cards in cart\r\n\t\tconst listItemStyle = {\r\n\t\t\twidth: '33%',\r\n\t\t\theight: '100%'\r\n\t\t}\r\n\r\n\t\tconst imageStyle = {\r\n\t\t\twidth: '100%',\r\n\t\t\theight: '100%'\r\n\t\t}\r\n\r\n\t\tconst cardId = \"cart_card\" + item.key\r\n\r\n\t\treturn (\r\n\t\t\t<ListItem style={listItemStyle}>\r\n\t\t\t\t<Card id={cardId}>\r\n\t\t\t\t\t<ListItemText>{item.name}</ListItemText>\r\n\t\t\t\t\t<img id=\"image\"\r\n\t\t\t\t\t\tsrc={item.image}\r\n\t\t\t\t\t\tclassName=\"Img\"\r\n\t\t\t\t\t\tstyle={imageStyle}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<CardContent>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<ListItemIcon>\r\n\t\t\t\t\t\t\t\t<LocationCityIcon />\r\n\t\t\t\t\t\t\t\t<ListItemText>{item.type}</ListItemText>\r\n\t\t\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<ListItemIcon>\r\n\t\t\t\t\t\t\t\t<SettingsOverscanIcon />\r\n\t\t\t\t\t\t\t\t<ListItemText>{item.size}</ListItemText>\r\n\t\t\t\t\t\t\t</ListItemIcon>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<ListItemText>$ {item.price} million</ListItemText>\r\n\t\t\t\t\t\t<ListItemText>Quantity: {item.qty}</ListItemText>\r\n\t\t\t\t\t</CardContent>\r\n\t\t\t\t\t<CardActions>\r\n\t\t\t\t\t\t<Button color=\"primary\" variant=\"contained\" onClick={this.props.removeItem}> Remove</Button>\r\n\t\t\t\t\t</CardActions>\r\n\t\t\t\t</Card>\r\n\t\t\t</ListItem >\r\n\t\t);\r\n\t};\r\n\r\n\t/**\r\n\t * Renders the Cart and its elements.\r\n\t */\r\n\trender() {\r\n\t\tconst flexContainer = {\r\n\t\t\tdisplay: 'flex',\r\n\t\t\tflexDirection: 'row',\r\n\t\t\tflexWrap: 'wrap'\r\n\t\t};\r\n\t\tconst cart = this.props.cart;\r\n\t\tconst listItems = cart.map(this.createItem);\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<List style={flexContainer}>{listItems}</List>\r\n\t\t\t\t<h3>Total: $ {this.props.cost} million</h3>\r\n\t\t\t\t<Button color=\"primary\" variant=\"contained\" onClick={() => alert(\"Checkout Total: $\" + this.props.cost + \" million\")}> Checkout</Button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Cart",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":42,"column":6,"nodeType":"43","endLine":46,"endColumn":8},{"ruleId":"41","severity":1,"message":"42","line":34,"column":6,"nodeType":"43","endLine":38,"endColumn":8},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]